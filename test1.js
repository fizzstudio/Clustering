var csv2json = require('csvjson-csv2json');
var data = csv2json(s2Data);
var Plotly = require('plotly.js-dist')
var clustering = require('./node_modules/density-clustering');
/*

var data1 = [{x:1,y:0}, {x:.707,y:.707}, {x:0,y:1}, {x:-.707,y:.707}, {x:-1,y:0},{x:-.707,y:-.707}, {x:0,y:-1}, {x:.707,y:-.707}];
var data2 = [{x:0,y:0}, {x:1,y:1}, {x:2,y:2}, {x:-3,y:3}, {x:4,y:4},{x:5,y:5}, {x:6,y:6}, {x:7,y:7}]



var data = coordinate([
    [
        340693,
        569371
    ],
    [
        349296,
        557688
    ],
    [
        339967,
        562602
    ],
    [
        342064,
        570045
    ],
    [
        330455,
        568758
    ],
    [
        339981,
        565418
    ],
    [
        338342,
        566864
    ],
    [
        338474,
        563350
    ],
    [
        334354,
        578047
    ],
    [
        334016,
        562797
    ],
    [
        343247,
        564376
    ],
    [
        330881,
        579058
    ],
    [
        339115,
        566863
    ],
    [
        345840,
        561591
    ],
    [
        334549,
        579199
    ],
    [
        337811,
        558454
    ],
    [
        340545,
        568654
    ],
    [
        331667,
        570387
    ],
    [
        332960,
        569308
    ],
    [
        345042,
        566973
    ],
    [
        334182,
        558498
    ],
    [
        335328,
        562880
    ],
    [
        337298,
        565486
    ],
    [
        335918,
        566525
    ],
    [
        330127,
        570072
    ],
    [
        334785,
        565575
    ],
    [
        326152,
        563230
    ],
    [
        345903,
        561314
    ],
    [
        352520,
        566829
    ],
    [
        341675,
        560197
    ],
    [
        344770,
        570309
    ],
    [
        336829,
        562228
    ],
    [
        342963,
        582232
    ],
    [
        338860,
        561151
    ],
    [
        343376,
        575709
    ],
    [
        338863,
        563107
    ],
    [
        338935,
        567577
    ],
    [
        344237,
        573700
    ],
    [
        328657,
        564864
    ],
    [
        340712,
        563178
    ],
    [
        344791,
        578536
    ],
    [
        341721,
        576427
    ],
    [
        341578,
        558672
    ],
    [
        331987,
        568997
    ],
    [
        341329,
        565571
    ],
    [
        334350,
        556417
    ],
    [
        330482,
        571217
    ],
    [
        338950,
        572545
    ],
    [
        325958,
        573367
    ],
    [
        348171,
        569251
    ],
    [
        342099,
        561508
    ],
    [
        327998,
        571265
    ],
    [
        337889,
        558031
    ],
    [
        340032,
        561740
    ],
    [
        338634,
        564414
    ],
    [
        351459,
        565704
    ],
    [
        336928,
        557412
    ],
    [
        343450,
        570659
    ],
    [
        331616,
        565089
    ],
    [
        354529,
        573677
    ],
    [
        331366,
        567311
    ],
    [
        340191,
        567638
    ],
    [
        338583,
        563529
    ],
    [
        338474,
        564151
    ],
    [
        338205,
        566246
    ],
    [
        342901,
        582886
    ],
    [
        347966,
        563506
    ],
    [
        346144,
        560472
    ],
    [
        329905,
        579935
    ],
    [
        330335,
        568221
    ],
    [
        341559,
        562163
    ],
    [
        341925,
        569393
    ],
    [
        332586,
        566187
    ],
    [
        330750,
        561657
    ],
    [
        337910,
        562252
    ],
    [
        336549,
        565597
    ],
    [
        343717,
        559909
    ],
    [
        345164,
        579614
    ],
    [
        340970,
        564831
    ],
    [
        347575,
        565576
    ],
    [
        338753,
        563384
    ],
    [
        345495,
        579864
    ],
    [
        350056,
        566657
    ],
    [
        350283,
        559840
    ],
    [
        335525,
        567445
    ],
    [
        351815,
        574947
    ],
    [
        341966,
        561987
    ],
    [
        334983,
        572690
    ],
    [
        336336,
        563145
    ],
    [
        335027,
        565050
    ],
    [
        332270,
        556288
    ],
    [
        339640,
        561426
    ],
    [
        338633,
        563504
    ],
    [
        336974,
        563207
    ],
    [
        337173,
        557853
    ],
    [
        333378,
        557892
    ],
    [
        344552,
        554676
    ],
    [
        351564,
        573155
    ],
    [
        338084,
        560295
    ],
    [
        345674,
        579033
    ],
    [
        345123,
        577788
    ],
    [
        329859,
        564384
    ],
    [
        353939,
        570931
    ],
    [
        344096,
        575522
    ],
    [
        359831,
        554975
    ],
    [
        340064,
        550509
    ],
    [
        358793,
        547046
    ],
    [
        358483,
        554925
    ],
    [
        357275,
        551101
    ],
    [
        354746,
        552404
    ],
    [
        356246,
        549756
    ],
    [
        361370,
        552483
    ],
    [
        359772,
        568428
    ],
    [
        363304,
        553764
    ],
    [
        360165,
        553303
    ],
    [
        358312,
        559466
    ],
    [
        352209,
        548608
    ],
    [
        357679,
        548036
    ],
    [
        335999,
        549795
    ],
    [
        358384,
        556361
    ],
    [
        356865,
        545785
    ],
    [
        352424,
        557574
    ],
    [
        335029,
        553213
    ],
    [
        361138,
        551307
    ],
    [
        341016,
        545280
    ],
    [
        353583,
        554147
    ],
    [
        327738,
        559624
    ],
    [
        331175,
        551842
    ],
    [
        331440,
        551885
    ],
    [
        330767,
        552963
    ],
    [
        325125,
        564342
    ],
    [
        324952,
        565867
    ],
    [
        325871,
        558965
    ],
    [
        325883,
        560492
    ],
    [
        353979,
        578923
    ],
    [
        353145,
        580916
    ],
    [
        343997,
        585193
    ],
    [
        348773,
        583528
    ],
    [
        355924,
        577596
    ],
    [
        321312,
        574721
    ],
    [
        325057,
        581121
    ],
    [
        326043,
        553772
    ],
    [
        321519,
        561045
    ],
    [
        325118,
        556212
    ],
    [
        324442,
        567881
    ],
    [
        320628,
        564596
    ],
    [
        317136,
        563479
    ],
    [
        324093,
        580491
    ],
    [
        321905,
        573147
    ],
    [
        321517,
        569562
    ],
    [
        321309,
        569996
    ],
    [
        321910,
        573825
    ],
    [
        315850,
        573154
    ],
    [
        324032,
        577807
    ],
    [
        316313,
        570785
    ],
    [
        318823,
        565345
    ],
    [
        321216,
        569834
    ],
    [
        324440,
        567074
    ],
    [
        328586,
        551385
    ],
    [
        337002,
        589527
    ],
    [
        339288,
        588052
    ],
    [
        341966,
        586266
    ],
    [
        335201,
        585318
    ],
    [
        327403,
        548875
    ],
    [
        326251,
        549298
    ],
    [
        318065,
        581616
    ],
    [
        324055,
        590810
    ],
    [
        347522,
        587567
    ],
    [
        339993,
        544064
    ],
    [
        338588,
        543875
    ],
    [
        330145,
        546705
    ],
    [
        357813,
        572855
    ],
    [
        317331,
        556086
    ],
    [
        316642,
        553340
    ],
    [
        310944,
        559497
    ],
    [
        365927,
        571713
    ],
    [
        366688,
        562413
    ],
    [
        364844,
        571623
    ],
    [
        347197,
        591316
    ],
    [
        353335,
        592567
    ],
    [
        352381,
        592377
    ],
    [
        344314,
        595915
    ],
    [
        335792,
        541310
    ],
    [
        322209,
        547247
    ],
    [
        333669,
        542228
    ],
    [
        327695,
        543105
    ],
    [
        366794,
        582584
    ],
    [
        366934,
        581294
    ],
    [
        367751,
        578289
    ],
    [
        315965,
        587160
    ],
    [
        332116,
        594868
    ],
    [
        328331,
        541094
    ],
    [
        367048,
        553451
    ],
    [
        371563,
        547746
    ],
    [
        373894,
        555347
    ],
    [
        371000,
        555062
    ],
    [
        368617,
        554066
    ],
    [
        373907,
        558472
    ],
    [
        365567,
        547606
    ],
    [
        369366,
        561201
    ],
    [
        367641,
        556309
    ],
    [
        365058,
        545456
    ],
    [
        339632,
        536577
    ],
    [
        333934,
        537464
    ],
    [
        339212,
        538693
    ],
    [
        336787,
        538925
    ],
    [
        341446,
        538787
    ],
    [
        350117,
        535859
    ],
    [
        349955,
        535578
    ],
    [
        374117,
        546122
    ],
    [
        350798,
        535657
    ],
    [
        375619,
        553791
    ],
    [
        371616,
        570648
    ],
    [
        374695,
        563163
    ],
    [
        333901,
        532836
    ],
    [
        344239,
        530765
    ],
    [
        332884,
        533990
    ],
    [
        312386,
        555195
    ],
    [
        340383,
        600071
    ],
    [
        321657,
        538660
    ],
    [
        303637,
        570253
    ],
    [
        304157,
        566007
    ],
    [
        304556,
        568584
    ],
    [
        304086,
        576100
    ],
    [
        302583,
        571881
    ],
    [
        333299,
        597586
    ],
    [
        326627,
        534442
    ],
    [
        327973,
        534972
    ],
    [
        316395,
        537403
    ],
    [
        357737,
        597104
    ],
    [
        344437,
        529492
    ],
    [
        328438,
        532686
    ],
    [
        331795,
        529654
    ],
    [
        306298,
        551902
    ],
    [
        304399,
        545221
    ],
    [
        297110,
        556485
    ],
    [
        298665,
        568245
    ],
    [
        300366,
        565761
    ],
    [
        370259,
        585265
    ],
    [
        378648,
        579579
    ],
    [
        379388,
        567285
    ],
    [
        352220,
        602793
    ],
    [
        366478,
        594677
    ],
    [
        322365,
        530808
    ],
    [
        378697,
        591764
    ],
    [
        318681,
        528806
    ],
    [
        321924,
        527106
    ],
    [
        385183,
        556284
    ],
    [
        331340,
        524203
    ],
    [
        386377,
        574187
    ],
    [
        388806,
        569524
    ],
    [
        324516,
        522674
    ],
    [
        302353,
        545544
    ],
    [
        319927,
        524637
    ],
    [
        310041,
        533285
    ],
    [
        296775,
        572432
    ],
    [
        299578,
        572052
    ],
    [
        294310,
        563522
    ],
    [
        297022,
        574097
    ],
    [
        289087,
        565427
    ],
    [
        290107,
        571927
    ],
    [
        289176,
        571435
    ],
    [
        292932,
        558293
    ],
    [
        303269,
        531608
    ],
    [
        313649,
        523765
    ],
    [
        302359,
        534317
    ],
    [
        363956,
        609339
    ],
    [
        368724,
        598412
    ],
    [
        320827,
        519618
    ],
    [
        293746,
        544468
    ],
    [
        297212,
        546223
    ],
    [
        289423,
        559134
    ],
    [
        286568,
        547471
    ],
    [
        283570,
        563726
    ],
    [
        288068,
        561932
    ],
    [
        282066,
        560178
    ],
    [
        282430,
        560217
    ],
    [
        284031,
        566654
    ],
    [
        384922,
        582877
    ],
    [
        393570,
        579641
    ],
    [
        312558,
        520650
    ],
    [
        308966,
        523409
    ],
    [
        392534,
        593343
    ],
    [
        385091,
        599401
    ],
    [
        306346,
        523584
    ],
    [
        296763,
        528676
    ],
    [
        276703,
        559740
    ],
    [
        275524,
        559548
    ],
    [
        293591,
        522132
    ],
    [
        292636,
        520371
    ],
    [
        283474,
        532727
    ],
    [
        277027,
        536847
    ],
    [
        396903,
        591235
    ],
    [
        407040,
        577739
    ],
    [
        404420,
        577532
    ],
    [
        400380,
        588221
    ],
    [
        386373,
        606623
    ],
    [
        405542,
        600089
    ],
    [
        286990,
        529505
    ],
    [
        289002,
        520678
    ],
    [
        285152,
        520229
    ],
    [
        262846,
        559590
    ],
    [
        280110,
        522025
    ],
    [
        281979,
        518199
    ],
    [
        279008,
        521035
    ],
    [
        265815,
        540385
    ],
    [
        408689,
        562521
    ],
    [
        413894,
        564459
    ],
    [
        411796,
        581307
    ],
    [
        419151,
        577335
    ],
    [
        415881,
        584352
    ],
    [
        409616,
        575024
    ],
    [
        412500,
        594675
    ],
    [
        412767,
        593558
    ],
    [
        410917,
        614521
    ],
    [
        411008,
        607342
    ],
    [
        403004,
        613466
    ],
    [
        257984,
        555707
    ],
    [
        259173,
        548593
    ],
    [
        269126,
        508814
    ],
    [
        261538,
        525920
    ],
    [
        260096,
        530550
    ],
    [
        404782,
        557913
    ],
    [
        405652,
        622938
    ]
]);
*/
//var data = coordinate([[-1 ,0], [0, 1], [1, 0], [0, -1]]);
var data = coordinate([
    [
        664159,
        550946
    ],
    [
        665845,
        557965
    ],
    [
        597173,
        575538
    ],
    [
        618600,
        551446
    ],
    [
        635690,
        608046
    ],
    [
        588100,
        557588
    ],
    [
        582015,
        546191
    ],
    [
        604678,
        574577
    ],
    [
        572029,
        518313
    ],
    [
        604737,
        574591
    ],
    [
        577728,
        587566
    ],
    [
        602013,
        574722
    ],
    [
        627968,
        574625
    ],
    [
        607269,
        536961
    ],
    [
        603145,
        574795
    ],
    [
        671919,
        571761
    ],
    [
        612184,
        570393
    ],
    [
        600032,
        575310
    ],
    [
        627912,
        593892
    ],
    [
        601967,
        604428
    ],
    [
        591851,
        569051
    ],
    [
        601444,
        572693
    ],
    [
        629718,
        558104
    ],
    [
        661430,
        603567
    ],
    [
        597551,
        556737
    ],
    [
        601182,
        582584
    ],
    [
        562704,
        570596
    ],
    [
        605107,
        563429
    ],
    [
        607214,
        575069
    ],
    [
        568824,
        570203
    ],
    [
        612485,
        518009
    ],
    [
        589244,
        573777
    ],
    [
        625579,
        551084
    ],
    [
        560237,
        500154
    ],
    [
        626224,
        569687
    ],
    [
        610666,
        551701
    ],
    [
        597428,
        569940
    ],
    [
        600582,
        599535
    ],
    [
        604168,
        555003
    ],
    [
        613871,
        550423
    ],
    [
        617310,
        551945
    ],
    [
        625728,
        579460
    ],
    [
        606300,
        566708
    ],
    [
        638559,
        558807
    ],
    [
        582176,
        630383
    ],
    [
        544056,
        577786
    ],
    [
        631297,
        578351
    ],
    [
        561574,
        621747
    ],
    [
        604973,
        574773
    ],
    [
        605284,
        556134
    ],
    [
        617910,
        592293
    ],
    [
        555904,
        640401
    ],
    [
        526559,
        509417
    ],
    [
        603849,
        572396
    ],
    [
        598634,
        619900
    ],
    [
        603359,
        589262
    ],
    [
        657455,
        567754
    ],
    [
        614279,
        599251
    ],
    [
        578496,
        631434
    ],
    [
        645171,
        595209
    ],
    [
        688015,
        533535
    ],
    [
        656477,
        573007
    ],
    [
        540029,
        563888
    ],
    [
        597418,
        538362
    ],
    [
        613545,
        574733
    ],
    [
        628696,
        542447
    ],
    [
        604157,
        574191
    ],
    [
        603126,
        497987
    ],
    [
        605850,
        533310
    ],
    [
        596179,
        529556
    ],
    [
        610330,
        552628
    ],
    [
        598184,
        531473
    ],
    [
        620438,
        511694
    ],
    [
        600202,
        622079
    ],
    [
        603021,
        577991
    ],
    [
        515612,
        540643
    ],
    [
        606548,
        574376
    ],
    [
        593490,
        623110
    ],
    [
        607084,
        595500
    ],
    [
        583728,
        563146
    ],
    [
        616044,
        533807
    ],
    [
        624452,
        584622
    ],
    [
        604438,
        574666
    ],
    [
        625709,
        660145
    ],
    [
        601376,
        579831
    ],
    [
        565148,
        557305
    ],
    [
        639418,
        537903
    ],
    [
        612799,
        537497
    ],
    [
        583653,
        652182
    ],
    [
        599808,
        596484
    ],
    [
        605250,
        573272
    ],
    [
        606738,
        601356
    ],
    [
        611044,
        571814
    ],
    [
        575440,
        568511
    ],
    [
        616329,
        529516
    ],
    [
        605927,
        572533
    ],
    [
        609286,
        586782
    ],
    [
        647354,
        579190
    ],
    [
        606929,
        571420
    ],
    [
        562920,
        559223
    ],
    [
        680357,
        620811
    ],
    [
        707100,
        601463
    ],
    [
        604294,
        574368
    ],
    [
        614917,
        600946
    ],
    [
        611508,
        503220
    ],
    [
        603789,
        574474
    ],
    [
        551740,
        588768
    ],
    [
        546031,
        570429
    ],
    [
        569197,
        559307
    ],
    [
        688712,
        568754
    ],
    [
        604067,
        574091
    ],
    [
        606809,
        572101
    ],
    [
        588597,
        622592
    ],
    [
        613840,
        534167
    ],
    [
        576263,
        547239
    ],
    [
        597077,
        568196
    ],
    [
        601339,
        571609
    ],
    [
        606011,
        569426
    ],
    [
        593398,
        559764
    ],
    [
        593166,
        622725
    ],
    [
        609796,
        532982
    ],
    [
        712648,
        607541
    ],
    [
        585048,
        505097
    ],
    [
        525967,
        565687
    ],
    [
        660327,
        585901
    ],
    [
        607604,
        573951
    ],
    [
        604001,
        573587
    ],
    [
        591484,
        571087
    ],
    [
        613868,
        585089
    ],
    [
        645464,
        660478
    ],
    [
        538571,
        654649
    ],
    [
        555429,
        604551
    ],
    [
        597620,
        586226
    ],
    [
        586097,
        567445
    ],
    [
        545235,
        539822
    ],
    [
        649088,
        575733
    ],
    [
        599123,
        616977
    ],
    [
        563763,
        559454
    ],
    [
        617717,
        613939
    ],
    [
        618869,
        577243
    ],
    [
        567188,
        560044
    ],
    [
        636628,
        533309
    ],
    [
        560362,
        567914
    ],
    [
        595014,
        632844
    ],
    [
        605876,
        550640
    ],
    [
        604352,
        573425
    ],
    [
        600679,
        599545
    ],
    [
        596891,
        579476
    ],
    [
        614943,
        540976
    ],
    [
        604415,
        571400
    ],
    [
        603698,
        573585
    ],
    [
        658199,
        568743
    ],
    [
        598759,
        582942
    ],
    [
        671269,
        590258
    ],
    [
        593317,
        534085
    ],
    [
        657985,
        453405
    ],
    [
        608557,
        590278
    ],
    [
        623004,
        508050
    ],
    [
        601900,
        569391
    ],
    [
        641031,
        593074
    ],
    [
        589658,
        640498
    ],
    [
        567565,
        573952
    ],
    [
        559078,
        570088
    ],
    [
        639431,
        588155
    ],
    [
        566609,
        537592
    ],
    [
        568570,
        579335
    ],
    [
        660650,
        615038
    ],
    [
        667639,
        571164
    ],
    [
        596796,
        529933
    ],
    [
        606111,
        617846
    ],
    [
        616060,
        590779
    ],
    [
        602873,
        527864
    ],
    [
        571334,
        594145
    ],
    [
        602167,
        543919
    ],
    [
        605100,
        573307
    ],
    [
        546640,
        560043
    ],
    [
        585195,
        555011
    ],
    [
        651740,
        589474
    ],
    [
        589112,
        536573
    ],
    [
        582057,
        543124
    ],
    [
        690968,
        555952
    ],
    [
        609030,
        552436
    ],
    [
        632125,
        541413
    ],
    [
        603445,
        630598
    ],
    [
        628264,
        616214
    ],
    [
        577242,
        574073
    ],
    [
        604090,
        574392
    ],
    [
        607911,
        576556
    ],
    [
        600665,
        638890
    ],
    [
        600117,
        539079
    ],
    [
        631182,
        565466
    ],
    [
        695646,
        652231
    ],
    [
        619445,
        567491
    ],
    [
        613191,
        571942
    ],
    [
        567428,
        580005
    ],
    [
        590583,
        623314
    ],
    [
        606289,
        670243
    ],
    [
        585175,
        574133
    ],
    [
        634967,
        579020
    ],
    [
        614615,
        574437
    ],
    [
        593061,
        579188
    ],
    [
        606933,
        576409
    ],
    [
        606587,
        573873
    ],
    [
        594084,
        629464
    ],
    [
        683697,
        581516
    ],
    [
        601530,
        577183
    ],
    [
        603055,
        589818
    ],
    [
        616561,
        619007
    ],
    [
        607463,
        477085
    ],
    [
        611581,
        572630
    ],
    [
        579712,
        568354
    ],
    [
        602887,
        595245
    ],
    [
        600039,
        557139
    ],
    [
        605913,
        579526
    ],
    [
        579773,
        568698
    ],
    [
        606324,
        544357
    ],
    [
        605958,
        573728
    ],
    [
        606144,
        575076
    ],
    [
        667472,
        570571
    ],
    [
        580048,
        565009
    ],
    [
        597802,
        576113
    ],
    [
        610263,
        574422
    ],
    [
        603855,
        575180
    ],
    [
        624369,
        532153
    ],
    [
        599870,
        591110
    ],
    [
        577167,
        617095
    ],
    [
        658403,
        611332
    ],
    [
        563460,
        480559
    ],
    [
        610980,
        522819
    ],
    [
        569422,
        567790
    ],
    [
        627727,
        578737
    ],
    [
        592804,
        584539
    ],
    [
        540783,
        626497
    ],
    [
        591823,
        639096
    ],
    [
        637323,
        549567
    ],
    [
        638078,
        629421
    ],
    [
        611315,
        560757
    ],
    [
        647103,
        573853
    ],
    [
        522993,
        595581
    ],
    [
        601187,
        531825
    ],
    [
        533799,
        564377
    ],
    [
        649034,
        528813
    ],
    [
        620975,
        564344
    ],
    [
        622407,
        583192
    ],
    [
        597026,
        642918
    ],
    [
        551291,
        576721
    ],
    [
        608768,
        610525
    ],
    [
        697959,
        614701
    ],
    [
        658281,
        582264
    ],
    [
        546632,
        599204
    ],
    [
        672565,
        564468
    ],
    [
        636500,
        587401
    ],
    [
        696144,
        548705
    ],
    [
        533551,
        582247
    ],
    [
        526802,
        551524
    ],
    [
        553038,
        606418
    ],
    [
        696601,
        603624
    ],
    [
        588964,
        597435
    ],
    [
        716139,
        621721
    ],
    [
        608529,
        586311
    ],
    [
        557378,
        567033
    ],
    [
        589994,
        610890
    ],
    [
        589344,
        563119
    ],
    [
        624415,
        515911
    ],
    [
        565483,
        551512
    ],
    [
        584895,
        574666
    ],
    [
        582777,
        542670
    ],
    [
        639394,
        576728
    ],
    [
        608298,
        573748
    ],
    [
        663578,
        586265
    ],
    [
        628080,
        562986
    ],
    [
        597421,
        554767
    ],
    [
        595193,
        576508
    ],
    [
        658103,
        572250
    ],
    [
        659529,
        498474
    ],
    [
        606415,
        581386
    ],
    [
        641976,
        577433
    ],
    [
        587466,
        564953
    ],
    [
        589180,
        595099
    ],
    [
        601885,
        573083
    ],
    [
        580561,
        528916
    ],
    [
        621726,
        578003
    ],
    [
        558817,
        576255
    ],
    [
        620213,
        574468
    ],
    [
        594010,
        570095
    ],
    [
        541976,
        512639
    ],
    [
        593840,
        578685
    ],
    [
        602667,
        575857
    ],
    [
        631446,
        561156
    ],
    [
        596481,
        567449
    ],
    [
        611318,
        581584
    ],
    [
        568546,
        564911
    ],
    [
        593865,
        572987
    ],
    [
        597017,
        575588
    ],
    [
        578804,
        573582
    ],
    [
        673750,
        594081
    ],
    [
        592714,
        553958
    ],
    [
        594029,
        586701
    ],
    [
        668502,
        563937
    ],
    [
        629533,
        537542
    ]
])
var dataArray = deCoordinate(data);
let distAvg = [];
let master = [];
for (let i = 0; i < dataArray.length; i++) {
  master.push(nNDistances(dataArray, i))
}
for (let i = 0; i < dataArray.length; i++) {
  let sum = 0;
  for (let j = 0; j < dataArray.length; j++) {
  sum += master[j][i];
}
distAvg.push(sum)
}
distAvg = distAvg.map((x) => x / dataArray.length)
console.log(dataArray[100]);

let minPts = 4;
/*
var fizzscan = new clustering.FIZZSCAN();
var clusters = fizzscan.run(dataArray, 2*distAvg[minPts], minPts, true);
console.log(clusters, fizzscan.noise);
console.log(`Number of clusters: ${clusters.length}`)
console.log(`Total elements: ${clusters.flat().length + fizzscan.noise.length}`)
console.log(`Total clustered elements: ${clusters.flat().length}`)
console.log(`Total noise elements: ${fizzscan.noise.length}`)
*/
var fizzscan = new clustering.DBSCAN();
var clusters = fizzscan.run(dataArray, 2*distAvg[minPts], minPts);
console.log(clusters, fizzscan.noise);
const hasCommonItem = clusters.flat().some(item => fizzscan.noise.includes(item));
console.log(hasCommonItem);
console.log(`Number of clusters: ${clusters.length}`)
console.log(`Total elements: ${clusters.flat().length + fizzscan.noise.length}`)
console.log(`Total clustered elements: ${clusters.flat().length}`)
console.log(`Total noise elements: ${fizzscan.noise.length}`)




function nNDistances(dataset, pointId) {
    //Returns list of distances from nearest neighbors for a point, sorted low to high.
    var distances = [];
    for (var id = 0; id < dataset.length; id++) {
      var dist = euclidDistance(dataset[pointId], dataset[id]);
      distances.push(dist);
    }
    
    return distances.sort((a, b) => { return a - b; });
  };
function euclidDistance(p, q) {
  //Returns euclidean distance between vectors p and q.
  var sum = 0;
  var i = Math.min(p.length, q.length);

  while (i--) {
    sum += (p[i] - q[i]) * (p[i] - q[i]);
  }

  return Math.sqrt(sum);
};
function coordinate(array) {
    //Adds x-y coordinates to arrays
    if (!(Array.isArray(array[0]))) {
        return array;
    }
    var dataArray = [];
    for (let i = 0; i < array.length; i++) {
        dataArray.push({ x: array[i][0], y: array[i][1] })
    }
    return dataArray;
}
function deCoordinate(array){
    //Removes x-y coordinates from arrays
    if (Array.isArray(array[0])){
        return array;
      }  
    var dataArray = [];
    for (let i = 0; i < array.length; i++) {
      dataArray.push([array[i]["x"], array[i]["y"]])
    }
    return dataArray;
}
function shoelace(data){
  let sum = 0;
  let n = data.length;
  for (let i = 0; i < n - 1; i++){
      sum += data[i].x * data[i + 1].y - data[i].y * data[i + 1].x
  }
  sum += data[n - 1].x * data[0].y - data[n - 1].y * data[0].x
  return Math.abs(sum/2);
}

function lin_reg(x, y) {
    //Get slope and intercept from x and y arrays.  
    let x_sum = 0;
    let y_sum = 0;
    let xy_sum = 0;
    let x2_sum = 0;
    const n = x.length;
    let i = 0;
    for (i = 0; i < n; i++) {
        let x_val = x[i];
        let y_val = y[i];
        x_sum += x_val;
        y_sum += y_val;
        xy_sum += x_val * y_val;
        x2_sum += x_val * x_val;
    }
    let slope = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum);
    let intercept = (y_sum / n) - slope * (x_sum / n);
    return [intercept, slope];
}
function perimeter(data){
  let sum = 0;
  let n = data.length;
  if (n == 2){
    return euclidDistance([data[0].x, data[0].y], [data[1].x, data[1].y])
  }
  for (let i = 0; i < n - 1; i++){
    let pointer = [data[i].x, data[i].y];
    let next = [data[i + 1].x, data[i + 1].y];
    sum += euclidDistance(pointer, next);
  }
  sum += euclidDistance([data[n-1].x, data[n-1].y], [data[0].x, data[0].y])
  return sum;
}

function flatness(data){
  return 2*Math.sqrt(shoelace(data)*Math.PI)/perimeter(data);
}

function getAngle(x, y){
    const subtraction = y.map((num, index) => num - x[index]);
    let angle = 0;
    if (subtraction[0] == 0 && subtraction[1] > 0){
      return 90;
    }
    else if (subtraction[0] == 0 && subtraction[1] < 0){
      return 270;
    }
    else if (subtraction[1] == 0 && subtraction[0] >= 0){
        return 0
    }
    else if (subtraction[1] == 0 && subtraction[0] < 0){
        return 180
    }
    else {
      
      switch (true){
        case subtraction[0] > 0 && subtraction[1] > 0:
          angle = Math.atan(subtraction[1] / subtraction[0])
          break;
        case subtraction[0] < 0 && subtraction[1] > 0:
          angle = Math.atan(subtraction[0] / subtraction[1])
          angle = Math.abs(angle) + Math.PI / 2;
          break;
        case subtraction[0] < 0 && subtraction[1] < 0:
          angle = Math.atan(subtraction[1] / subtraction[0])
          angle = Math.abs(angle) + Math.PI;  
          break;
        case subtraction[0] > 0 && subtraction [1] < 0:
          angle = Math.atan(subtraction[0] / subtraction[1])
          angle = Math.abs(angle) + 3 * Math.PI / 2;
          break;
      }
    }
    
    angle = angle * 180 / Math.PI;
    return angle;
  }

function simplifyHull(inputShell){
    let shell = deCoordinate(inputShell);
    let n = shell.length;
    let precision = 15;
    let angle1 = 0;
    let angle2 = 0;
    let difference = 0;

    //Trims vertices from the shell which change the angle of the incoming line by less than precision degrees
    for (let i = 0; i < n; i++){
        angle1 = getAngle(shell[i % n], shell[(i + 1) % n]);
        angle2 = getAngle(shell[(i + 1) % n], shell[(i + 2) % n]);
        difference = angle2 - angle1;
        if ((Math.abs(difference) < precision) || (Math.abs(difference + 360) < precision) || (Math.abs(difference - 360) < precision)){
            shell.splice((i + 1) % n, 1);
            i--;
            n--;
        }
    }   

    //'Fills in' small edges near corners
    let peri = perimeter(coordinate(shell));
    for (let i = 0; i < n; i++) {
      if (euclidDistance(shell[(i + 1) % n], shell[(i + 2) % n]) < (peri / 16)) {
        angle1 = getAngle(shell[i % n], shell[(i + 1) % n]);
        angle2 = getAngle(shell[(i + 2) % n], shell[(i + 3) % n]);
        difference = angle2 - angle1;
        if (!(160 < ((difference + 720) % 360) && ((difference + 720) % 360) < 200)) {
          let newPoint = completeAngle(shell[i % n], shell[(i + 1) % n], shell[(i + 2) % n], shell[(i + 3) % n])
          shell[(i + 1) % n] = newPoint;
          shell.splice((i + 2) % n, 1);
          i--;
          n--;
        }
      }
    }
    return coordinate(shell);    
  }
  
  function completeAngle(p1, p2, p3, p4){
    //Calculates and returns the intersection point of the lines bridging p1-p2 and p3-p4.
    //See derivation here: https://www.desmos.com/calculator/vmgoniltui If whoever's reading this has an easier way to do this let me know
  
    //Handles edge case when two points are aligned vertically
    if ((p2[0]-p1[0]) == 0){
        if ((p4[0]-p3[0]) == 0){
            //This should never happen if used on a convex polygon
            return -1;
        }
        return (p4[1]-p3[1])/(p4[0]-p3[0]) * p1[0] + p3[1] - (p4[1]-p3[1])/(p4[0]-p3[0]) * p3[0];
    }
    
    if ((p4[0]-p3[0]) == 0){
        return (p2[1]-p1[1])/(p2[0]-p1[0]) * p3[0] + p1[1] - (p2[1]-p1[1])/(p2[0]-p1[0]) * p1[0];
    }
    
    let slope12 = (p2[1]-p1[1])/(p2[0]-p1[0]);
    let slope34 = (p4[1]-p3[1])/(p4[0]-p3[0]);
    if ((slope12 - slope34) == 0){
        //This should also never happen if used on a convex polygon
        return -1;
    }
    let x = (p1[1] - p3[1] - slope12 * p1[0] + slope34 * p3[0]) / (slope34 - slope12);
    let newPoint = [x, slope12 * x + p1[1] - slope12 * p1[0]];
    return newPoint;
    }

function judgeShape(data) {
    console.log(data);
    let h = convexhull.makeHull(data);
    //console.log(h);
    let flat = flatness(h);
    //console.log(flat);
    if (flat > .9) {
        return "roughly circular";
    }
    else if (flat > .6) {
        let simple = deCoordinate(simplifyHull(h));
        //console.log(JSON.parse(JSON.stringify(simple)));
        let sides = simple.length;
        switch (true) {
            case sides == 3:
                return "triangular";
            case sides == 4:
                let angle1 = getAngle(simple[0], simple[1]);
                let angle2 = getAngle(simple[1], simple[2]);
                let angle3 = getAngle(simple[2], simple[3]);
                let angle4 = getAngle(simple[3], simple[0]);
                let difference1 = angle2 - angle1;
                let difference2 = angle3 - angle2;
                let difference3 = angle4 - angle3;
                let difference4 = angle1- angle4;
                console.log(angle1, angle2, angle3, angle4)
                console.log(difference1, difference2, difference3, difference4);
                if ((Math.abs(((difference1 + 720) % 360) - 270) < 10) && (Math.abs(((difference2 + 720) % 360) - 270) < 10) && (Math.abs(((difference3 + 720) % 360) - 270) < 10) && (Math.abs(((difference4 + 720) % 360) - 270) < 10)){
                    let distance1 = euclidDistance(simple[0], simple[1]);
                    let distance2 = euclidDistance(simple[1], simple[2]);
                    let distance3 = euclidDistance(simple[2], simple[3]);
                    let distance4 = euclidDistance(simple[3], simple[0]);
                    let average = (distance1 + distance2 + distance3 + distance4) / 4;
                    if ((average * .91 < distance1 && distance1 < average * 1.1) && (average * .91 < distance2 && distance2 < average * 1.1) && (average * .91 < distance3 && distance3 < average * 1.1) && (average * .91 < distance4 && distance4 < average * 1.1)){
                        console.log((angle1 % 90 + angle2 % 90 + angle3 % 90 + angle4 % 90) / 4);
                        if ((((angle1 % 90 + angle2 % 90 + angle3 % 90 + angle4 % 90) / 4) > 25) && (((angle1 % 90 + angle2 % 90 + angle3 % 90 + angle4 % 90) / 4) < 65)){
                            return "diamond";
                        }
                        else {
                            return "square";
                        }
                    }
                    else {
                        return "rectangular";
                    }
                }
        }
        return "irregular";
    }
    else {
        let xData = [];
        let yData = [];
        for (let i = 0; i < data.length; i++) {
            xData.push(data[i][0]);
            yData.push(data[i][1]);
        }
        let slope = lin_reg(xData, yData)[1];
        switch (true) {
            case slope > 5 || slope < -5:
                return "roughly linear: vertical";
            case slope > .2:
                return "roughly linear: positively correlated";
            case slope < .2 && slope > -.2:
                return "roughly linear: horizontal";
            case slope < -.2:
                return "roughly linear: negatively correlated";
        }
    }
}


let y = [];
let x = [];

for (let point of data){
    x.push(point.x);
    y.push(point.y);
}

shell = convexhull.makeHull(data);
shell = simplifyHull(shell);
let y2 = [];
let x2 = [];

for (let point of shell){
    x2.push(point.x);
    y2.push(point.y);
}
x2.push(shell[0].x);
y2.push(shell[0].y);


TESTER2 = document.getElementById('heatmap1');
var trace1 = {
    x: x,
    y: y,
    mode: 'markers',
    type: 'scatter'
};

var trace2 = {
    x: x2,
    y: y2,
    mode: 'lines+markers',
    type: 'scatter'
};
let temp = [trace1, trace2];
Plotly.newPlot(TESTER2, temp);


console.log(judgeShape(data));
//console.log(flatness(convexhull.makeHull(data)));
